// app/types.ts

export interface Class {
  id: string; // UUID for unique class identification (generated by Supabase)
  name: string;
  description: string;
  type: string; // e.g., "Yoga", "Strength Training"
  difficulty: string; // e.g., "Beginner", "Intermediate"
  duration: number; // In minutes
  capacity: number;
  longDescription: string; // Detailed description for class page
  cancellationPolicy: string; // Cancellation policy for the class
  price: number; // Price in the smallest currency unit (e.g., cents for USD)
  studio_id: string; // Foreign key referencing the studio that offers this class
}

export interface Schedule {
  id: string; // UUID for unique schedule identification (generated by Supabase)
  class_id: string; // Foreign key referencing classes.id
  studio_id: string; // Foreign key referencing studios.id
  start_time: string; // Timestamp (ISO format or similar)
  end_time: string; // Timestamp (ISO format or similar)
  instructor_name: string; // Name of the instructor for this schedule
  lifepass_spots: number; // Number of spots available for LifePass members
  enrolled: number; // Number of users currently enrolled
  // Note: You might not need price here if it's always the same as the class price
}

export interface Studio {
  id: string; // UUID for unique studio identification (generated by Supabase)
  name: string;
  description: string;
  imageUrl: string;
  location: string; // General location (e.g., "District 1")
  address: string; // Specific address
  phoneNumber: string;
  email: string;
  website?: string;
  socialMedia: {
    facebook?: string;
    instagram?: string;
  };
  amenities: string[]; // Array of amenities (e.g., ["Showers", "Lockers"])
  // Note: You could have a separate table for ratings/reviews and link them to the studio
}

//Interface to hold information from multiple tables
export interface BookingWithDetails {
  id: string;
  created_at: string;
  status: string;
  user_id: string;
  schedule_id: string;
  schedules: Schedule;
  classes: Class;
  studios: Studio;
}

interface ZaloPaymentTransaction {
  id: string; // Unique identifier for the payment order
  user_id: string; // ID of the user making the payment
  schedule_id: string; // ID of the schedule being paid for
  zalo_transaction_token: string; // Unique ZaloPay order ID (apptransid)
  transaction_id: string; // ZaloPay transaction ID
  amount: number; // Payment amount
  status: string; // Payment status (e.g., 'pending', 'successful', 'failed')
  created_at: string; // Timestamp when the payment order was created
  updated_at: string; // Timestamp when the payment order was last updated
}
